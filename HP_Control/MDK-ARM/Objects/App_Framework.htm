<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\App_Framework.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\App_Framework.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Oct 23 21:14:43 2025
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SystemInit &rArr; SystemHardwareInit &rArr; ClockConfig_Init &rArr; CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[54]">CSE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">CSE_IRQHandler</a><BR>
 <LI><a href="#[ed]">CKGEN_GetPccClockFreq</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">CKGEN_DRV_GetFreq</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ACMP0_IRQHandler</a> from acmp_irq.o(i.ACMP0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[33]">ADC0_IRQHandler</a> from adc_irq.o(i.ADC0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[34]">ADC1_IRQHandler</a> from adc_irq.o(i.ADC1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[29]">CAN0_IRQHandler</a> from can_irq.o(i.CAN0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2a]">CAN0_Wakeup_IRQHandler</a> from can_irq.o(i.CAN0_Wakeup_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2b]">CAN1_IRQHandler</a> from can_irq.o(i.CAN1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2c]">CAN1_Wakeup_IRQHandler</a> from can_irq.o(i.CAN1_Wakeup_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2d]">CAN2_IRQHandler</a> from can_irq.o(i.CAN2_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2e]">CAN2_Wakeup_IRQHandler</a> from can_irq.o(i.CAN2_Wakeup_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2f]">CAN3_IRQHandler</a> from can_irq.o(i.CAN3_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[30]">CAN3_Wakeup_IRQHandler</a> from can_irq.o(i.CAN3_Wakeup_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[5e]">CAN_EventCallback</a> from can_config.o(i.CAN_EventCallback) referenced from can_config.o(i.CAN_Config_Init)
 <LI><a href="#[60]">CAN_RxCallback</a> from main.o(i.CAN_RxCallback) referenced from main.o(i.main)
 <LI><a href="#[54]">CSE_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[b]">DMA0_Channel0_IRQHandler</a> from dma_irq.o(i.DMA0_Channel0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[15]">DMA0_Channel10_IRQHandler</a> from dma_irq.o(i.DMA0_Channel10_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[16]">DMA0_Channel11_IRQHandler</a> from dma_irq.o(i.DMA0_Channel11_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[17]">DMA0_Channel12_IRQHandler</a> from dma_irq.o(i.DMA0_Channel12_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[18]">DMA0_Channel13_IRQHandler</a> from dma_irq.o(i.DMA0_Channel13_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[19]">DMA0_Channel14_IRQHandler</a> from dma_irq.o(i.DMA0_Channel14_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel15_IRQHandler</a> from dma_irq.o(i.DMA0_Channel15_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[c]">DMA0_Channel1_IRQHandler</a> from dma_irq.o(i.DMA0_Channel1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[d]">DMA0_Channel2_IRQHandler</a> from dma_irq.o(i.DMA0_Channel2_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[e]">DMA0_Channel3_IRQHandler</a> from dma_irq.o(i.DMA0_Channel3_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[f]">DMA0_Channel4_IRQHandler</a> from dma_irq.o(i.DMA0_Channel4_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[10]">DMA0_Channel5_IRQHandler</a> from dma_irq.o(i.DMA0_Channel5_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[11]">DMA0_Channel6_IRQHandler</a> from dma_irq.o(i.DMA0_Channel6_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[12]">DMA0_Channel7_IRQHandler</a> from dma_irq.o(i.DMA0_Channel7_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[13]">DMA0_Channel8_IRQHandler</a> from dma_irq.o(i.DMA0_Channel8_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[14]">DMA0_Channel9_IRQHandler</a> from dma_irq.o(i.DMA0_Channel9_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[58]">ECC_1BIT_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[59]">ECC_2BIT_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[28]">EIO_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[37]">EWDG_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[57]">FLASH_Collision_IRQHandler</a> from flash_irq.o(i.FLASH_Collision_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[55]">FLASH_ECC_IRQHandler</a> from flash_irq.o(i.FLASH_ECC_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[56]">FLASH_IRQHandler</a> from flash_irq.o(i.FLASH_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[27]">I2C0_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[5b]">InitSram</a> from system_ac7840x.o(i.InitSram) referenced from startup_ac7840x.o(.text)
 <LI><a href="#[39]">LVD_IRQHandler</a> from spm_irq.o(i.LVD_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[38]">MCM_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4f]">PCT_IRQHandler</a> from pct_irq.o(i.PCT_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[31]">PDT0_IRQHandler</a> from pdt_irq.o(i.PDT0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[32]">PDT1_IRQHandler</a> from pdt_irq.o(i.PDT1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1b]">PORTA_IRQHandler</a> from gpio_irq.o(i.PORTA_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1c]">PORTB_IRQHandler</a> from gpio_irq.o(i.PORTB_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1d]">PORTC_IRQHandler</a> from gpio_irq.o(i.PORTC_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1e]">PORTD_IRQHandler</a> from gpio_irq.o(i.PORTD_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[1f]">PORTE_IRQHandler</a> from gpio_irq.o(i.PORTE_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3d]">PWM0_Channel_IRQHandler</a> from pwm_irq.o(i.PWM0_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3e]">PWM0_Fault_IRQHandler</a> from pwm_irq.o(i.PWM0_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3c]">PWM0_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM0_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[40]">PWM1_Channel_IRQHandler</a> from pwm_irq.o(i.PWM1_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[41]">PWM1_Fault_IRQHandler</a> from pwm_irq.o(i.PWM1_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3f]">PWM1_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM1_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[43]">PWM2_Channel_IRQHandler</a> from pwm_irq.o(i.PWM2_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[44]">PWM2_Fault_IRQHandler</a> from pwm_irq.o(i.PWM2_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[42]">PWM2_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM2_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[46]">PWM3_Channel_IRQHandler</a> from pwm_irq.o(i.PWM3_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[47]">PWM3_Fault_IRQHandler</a> from pwm_irq.o(i.PWM3_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[45]">PWM3_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM3_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[49]">PWM4_Channel_IRQHandler</a> from pwm_irq.o(i.PWM4_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4a]">PWM4_Fault_IRQHandler</a> from pwm_irq.o(i.PWM4_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[48]">PWM4_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM4_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4c]">PWM5_Channel_IRQHandler</a> from pwm_irq.o(i.PWM5_Channel_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4d]">PWM5_Fault_IRQHandler</a> from pwm_irq.o(i.PWM5_Fault_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4b]">PWM5_Overflow_IRQHandler</a> from pwm_irq.o(i.PWM5_Overflow_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3b]">RCM_IRQHandler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[4e]">RTC_IRQHandler</a> from rtc_irq.o(i.RTC_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[67]">Reset_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[24]">SPI0_IRQHandler</a> from spi_irq.o(i.SPI0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[25]">SPI1_IRQHandler</a> from spi_irq.o(i.SPI1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[26]">SPI2_IRQHandler</a> from spi_irq.o(i.SPI2_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[3a]">SPM_IRQHandler</a> from spm_irq.o(i.SPM_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from osif_baremetal.o(i.SysTick_Handler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_ac7840x.o(i.SystemInit) referenced from startup_ac7840x.o(.text)
 <LI><a href="#[50]">TIMER_Channel0_IRQHandler</a> from timer_irq.o(i.TIMER_Channel0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[51]">TIMER_Channel1_IRQHandler</a> from timer_irq.o(i.TIMER_Channel1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[52]">TIMER_Channel2_IRQHandler</a> from timer_irq.o(i.TIMER_Channel2_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[53]">TIMER_Channel3_IRQHandler</a> from timer_irq.o(i.TIMER_Channel3_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[63]">Task_1000ms_CANStatusMonitor</a> from main.o(i.Task_1000ms_CANStatusMonitor) referenced from main.o(i.main)
 <LI><a href="#[65]">Task_100ms_RealTimeCANMonitor</a> from main.o(i.Task_100ms_RealTimeCANMonitor) referenced from main.o(i.main)
 <LI><a href="#[61]">Task_10ms_SendSensorData</a> from main.o(i.Task_10ms_SendSensorData) referenced from main.o(i.main)
 <LI><a href="#[66]">Task_1ms_CANMessageProcess</a> from main.o(i.Task_1ms_CANMessageProcess) referenced from main.o(i.main)
 <LI><a href="#[64]">Task_2000ms_SensorDataMonitor</a> from main.o(i.Task_2000ms_SensorDataMonitor) referenced from main.o(i.main)
 <LI><a href="#[62]">Task_50ms_SafetyCheck</a> from main.o(i.Task_50ms_SafetyCheck) referenced from main.o(i.main)
 <LI><a href="#[20]">UART0_IRQHandler</a> from uart_irq.o(i.UART0_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[21]">UART1_IRQHandler</a> from uart_irq.o(i.UART1_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[22]">UART2_IRQHandler</a> from uart_irq.o(i.UART2_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[23]">UART3_IRQHandler</a> from uart_irq.o(i.UART3_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[0]">UART_DRV_IRQHandler</a> from uart_drv.o(i.UART_DRV_IRQHandler) referenced 8 times from uart_irq.o(.data)
 <LI><a href="#[6]">UsageFault_Handler</a> from startup_ac7840x.o(.text) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[36]">WDG_IRQHandler</a> from wdg_irq.o(i.WDG_IRQHandler) referenced from startup_ac7840x.o(RESET)
 <LI><a href="#[5d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ac7840x.o(.text)
 <LI><a href="#[5f]">fputc</a> from debugout_ac7840x.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[68]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1cb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1cc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[67]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ECC_1BIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ECC_2BIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>MCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac7840x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1cd]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ReceiveMessage
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_voltage_to_resistance
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EventCallback
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultDiagnosis_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitMonitor
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_temperature_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_temperature_encode
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_ctrl_bypass_valve_duty_decode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_temperature_encode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_pressure_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_temperature_encode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_pressure_encode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_ctrl_bypass_valve_duty_decode
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_temperature_encode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_pressure_encode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_bypass_ratio_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_temperature_encode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_pressure_encode
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1d6]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[72]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1b8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[69]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, acmp_irq.o(i.ACMP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ACMP0_IRQHandler &rArr; ACMP_CommonISR
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_CommonISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>ACMP_CommonISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, acmp_drv.o(i.ACMP_CommonISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACMP_CommonISR
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>ADC0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc_irq.o(i.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0_IRQHandler &rArr; ADC_CommonISR &rArr; ADC_GetInjectEOCInterruptEnableFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, adc_irq.o(i.ADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC1_IRQHandler &rArr; ADC_CommonISR &rArr; ADC_GetInjectEOCInterruptEnableFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>ADC_CommonISR</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, adc_drv.o(i.ADC_CommonISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_CommonISR &rArr; ADC_GetInjectEOCInterruptEnableFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetRegularEOCInterruptEnableFlag
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetRegularEOCFlag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectLength
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectEOCInterruptEnableFlag
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectEOCFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearRegularEOCFlag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearInjectEOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>ADC_DRV_ClearConvCompleteFlag</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, adc_drv.o(i.ADC_DRV_ClearConvCompleteFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DRV_ClearConvCompleteFlag &rArr; ADC_ClearInjectEOCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearRegularEOCFlag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearInjectEOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>

<P><STRONG><a name="[88]"></a>ADC_DRV_ConfigChan</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, adc_drv.o(i.ADC_DRV_ConfigChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADC_DRV_ConfigChan &rArr; ADC_SetChannelSampleTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetRegularConversionChannel
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetChannelSampleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>

<P><STRONG><a name="[8b]"></a>ADC_DRV_ConfigConverter</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, adc_drv.o(i.ADC_DRV_ConfigConverter))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC_DRV_ConfigConverter &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_InstallCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetInterruptNumber
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[90]"></a>ADC_DRV_GetConvCompleteFlag</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adc_drv.o(i.ADC_DRV_GetConvCompleteFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_DRV_GetConvCompleteFlag &rArr; ADC_GetInjectEOCFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetRegularEOCFlag
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInjectEOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>

<P><STRONG><a name="[8d]"></a>ADC_DRV_GetInterruptNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_DRV_GetInterruptNumber))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[172]"></a>ADC_DRV_GetSeqResult</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, adc_drv.o(i.ADC_DRV_GetSeqResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_DRV_GetSeqResult
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>

<P><STRONG><a name="[91]"></a>ADC_DRV_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DRV_Init &rArr; CKGEN_DRV_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[179]"></a>ADC_DRV_InitChanStruct</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_DRV_InitChanStruct))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[178]"></a>ADC_DRV_InitConverterStruct</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_DRV_InitConverterStruct))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[8e]"></a>ADC_DRV_InstallCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_DRV_InstallCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DRV_InstallCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[171]"></a>ADC_DRV_SoftwareStartRegularConvert</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_DRV_SoftwareStartRegularConvert))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>

<P><STRONG><a name="[29]"></a>CAN0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN0_IRQHandler &rArr; CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_Wakeup_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN0_Wakeup_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN0_Wakeup_IRQHandler &rArr; CAN_WakeupIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeupIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN1_IRQHandler &rArr; CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_Wakeup_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN1_Wakeup_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_Wakeup_IRQHandler &rArr; CAN_WakeupIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeupIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN2_IRQHandler &rArr; CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN2_Wakeup_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN2_Wakeup_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2_Wakeup_IRQHandler &rArr; CAN_WakeupIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeupIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN3_IRQHandler &rArr; CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN3_Wakeup_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, can_irq.o(i.CAN3_Wakeup_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN3_Wakeup_IRQHandler &rArr; CAN_WakeupIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeupIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>CAN_ComputePayloadSize</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, can_hw.o(i.CAN_ComputePayloadSize))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetMsgToTbuf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetMsgFromRbuf
</UL>

<P><STRONG><a name="[188]"></a>CAN_Config_GetStats</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, can_config.o(i.CAN_Config_GetStats))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100ms_RealTimeCANMonitor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1000ms_CANStatusMonitor
</UL>

<P><STRONG><a name="[98]"></a>CAN_Config_Init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, can_config.o(i.CAN_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CAN_Config_Init &rArr; CAN_DRV_Init &rArr; CAN_DRV_SetFilter &rArr; CAN_SetFilterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetDefaultConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigGpio
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigFilters
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9c]"></a>CAN_Config_ReceiveMessage</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, can_config.o(i.CAN_Config_ReceiveMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_Config_ReceiveMessage &rArr; CAN_DRV_Receive &rArr; CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetRbufStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Task
</UL>

<P><STRONG><a name="[1c3]"></a>CAN_Config_RegisterRxCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_config.o(i.CAN_Config_RegisterRxCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>CAN_Config_ResetController</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can_config.o(i.CAN_Config_ResetController))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CAN_Config_ResetController &rArr; CAN_DRV_Init &rArr; CAN_DRV_SetFilter &rArr; CAN_SetFilterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>CAN_Config_SendMessage</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, can_config.o(i.CAN_Config_SendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = CAN_Config_SendMessage &rArr; CAN_DRV_Send &rArr; CAN_DRV_SetMsgToTbuf &rArr; CAN_WriteTbufData
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetBase
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[a9]"></a>CAN_Config_Task</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, can_config.o(i.CAN_Config_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN_Config_Task &rArr; CAN_Config_ReceiveMessage &rArr; CAN_DRV_Receive &rArr; CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ReceiveMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1ms_CANMessageProcess
</UL>

<P><STRONG><a name="[a2]"></a>CAN_DRV_Deinit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, can_drv.o(i.CAN_DRV_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_DRV_Deinit &rArr; CAN_EnableWakeupIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableWakeupIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaDestroy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_InstallWakeupCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_InstallEventCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ResetController
</UL>

<P><STRONG><a name="[a4]"></a>CAN_DRV_GetBase</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_drv.o(i.CAN_DRV_GetBase))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
</UL>

<P><STRONG><a name="[9a]"></a>CAN_DRV_GetDefaultConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, can_drv.o(i.CAN_DRV_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DRV_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[b0]"></a>CAN_DRV_GetMsgFromRbuf</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, can_drv.o(i.CAN_DRV_GetMsgFromRbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ComputePayloadSize
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Receive
</UL>

<P><STRONG><a name="[9d]"></a>CAN_DRV_GetRbufStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can_drv.o(i.CAN_DRV_GetRbufStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DRV_GetRbufStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetRbufStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ReceiveMessage
</UL>

<P><STRONG><a name="[9b]"></a>CAN_DRV_Init</STRONG> (Thumb, 712 bytes, Stack size 32 bytes, can_drv.o(i.CAN_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_DRV_Init &rArr; CAN_DRV_SetFilter &rArr; CAN_SetFilterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableWakeupIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaDestroy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetCANTimeStampClkDiv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetFilter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_InstallWakeupCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_InstallEventCallback
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTimeStamp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTdc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetSspOffset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetSlowBitrate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetReset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetListenOnlyMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetIntMask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetFastBitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ResetController
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[ac]"></a>CAN_DRV_InstallEventCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_drv.o(i.CAN_DRV_InstallEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
</UL>

<P><STRONG><a name="[ae]"></a>CAN_DRV_InstallWakeupCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_drv.o(i.CAN_DRV_InstallWakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
</UL>

<P><STRONG><a name="[9f]"></a>CAN_DRV_Receive</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, can_drv.o(i.CAN_DRV_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_DRV_Receive &rArr; CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetRbufStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetMsgFromRbuf
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReleaseRbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ReceiveMessage
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EventCallback
</UL>

<P><STRONG><a name="[a7]"></a>CAN_DRV_Send</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, can_drv.o(i.CAN_DRV_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CAN_DRV_Send &rArr; CAN_DRV_SetMsgToTbuf &rArr; CAN_WriteTbufData
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetStandbyState
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetResetState
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StartTransmit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetMsgToTbuf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsTransmitting
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsTransmitBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
</UL>

<P><STRONG><a name="[b7]"></a>CAN_DRV_SetFilter</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, can_drv.o(i.CAN_DRV_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_DRV_SetFilter &rArr; CAN_SetFilterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetResetState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetFilterEnable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetReset
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[c2]"></a>CAN_DRV_SetMsgToTbuf</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, can_drv.o(i.CAN_DRV_SetMsgToTbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_DRV_SetMsgToTbuf &rArr; CAN_WriteTbufData
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WriteTbufData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ComputePayloadSize
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTbufSelect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SelectNextTsbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
</UL>

<P><STRONG><a name="[94]"></a>CAN_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, can_drv.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetVerMem
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetCtrl1
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>CAN_RxCallback</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, main.o(i.CAN_RxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CAN_RxCallback &rArr; gcu_control_ctrl_bypass_valve_duty_decode &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_unpack
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_ctrl_bypass_valve_duty_decode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetDirectionalValveState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c4]"></a>CAN_SetFilterEnable</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, can_hw.o(i.CAN_SetFilterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_SetFilterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetFilter
</UL>

<P><STRONG><a name="[c3]"></a>CAN_StartTransmit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can_hw.o(i.CAN_StartTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_StartTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
</UL>

<P><STRONG><a name="[95]"></a>CAN_WakeupIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, can_drv.o(i.CAN_WakeupIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_WakeupIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN3_Wakeup_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Wakeup_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Wakeup_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Wakeup_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>CAN_WriteTbufData</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, can_hw.o(i.CAN_WriteTbufData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_WriteTbufData
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetMsgToTbuf
</UL>

<P><STRONG><a name="[d5]"></a>CKGEN_AutoTest</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_AutoTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CKGEN_AutoTest &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>

<P><STRONG><a name="[93]"></a>CKGEN_DRV_Enable</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_DRV_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_DRV_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[8c]"></a>CKGEN_DRV_GetFreq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_DRV_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClockFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_SetBaudRate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osif_UpdateTickConfig
</UL>

<P><STRONG><a name="[ee]"></a>CKGEN_DRV_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 96 bytes, ckgen_drv.o(i.CKGEN_DRV_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_AutoTest
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_GetSPLLStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSimConfiguration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPccConfiguration
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetConfiguration
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetDefaultConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_UpdateConfiguration
</UL>

<P><STRONG><a name="[f4]"></a>CKGEN_DRV_SetModuleClock</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_DRV_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CKGEN_DRV_SetModuleClock &rArr; CKGEN_SetPWMClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPeripheralClock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPWMClock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetCANClockDivider
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetCANClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPccConfiguration
</UL>

<P><STRONG><a name="[92]"></a>CKGEN_DRV_SoftReset</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_DRV_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_DRV_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_Init
</UL>

<P><STRONG><a name="[f9]"></a>CKGEN_DRV_UpdateConfiguration</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_DRV_UpdateConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfig_Init
</UL>

<P><STRONG><a name="[102]"></a>CKGEN_GetCANClock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ckgen_hw.o(i.CKGEN_GetCANClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_GetCANClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
</UL>

<P><STRONG><a name="[103]"></a>CKGEN_GetCANClockDivider</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetCANClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
</UL>

<P><STRONG><a name="[101]"></a>CKGEN_GetClockoutSourceFromMux1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetClockoutSourceFromMux1))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
</UL>

<P><STRONG><a name="[108]"></a>CKGEN_GetClockoutSourceSel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetClockoutSourceSel))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
</UL>

<P><STRONG><a name="[10b]"></a>CKGEN_GetCurrentBusClockDividerRatio</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetCurrentBusClockDividerRatio))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
</UL>

<P><STRONG><a name="[d8]"></a>CKGEN_GetCurrentSystemClockSource</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetCurrentSystemClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_TransitionSystemClock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureVHSI
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureTemporarySystemClock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSI
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[100]"></a>CKGEN_GetLSIClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetLSIClock))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetLSIFreq
</UL>

<P><STRONG><a name="[105]"></a>CKGEN_GetPWMClock</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, ckgen_hw.o(i.CKGEN_GetPWMClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CKGEN_GetPWMClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClockFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
</UL>

<P><STRONG><a name="[104]"></a>CKGEN_GetPeripheralClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ckgen_hw.o(i.CKGEN_GetPeripheralClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_GetPeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPccClockFreq
</UL>

<P><STRONG><a name="[107]"></a>CKGEN_GetRTCClock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_GetRTCClock))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetRtcClkFreq
</UL>

<P><STRONG><a name="[111]"></a>CKGEN_SYS_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfig_Init
</UL>

<P><STRONG><a name="[f5]"></a>CKGEN_SetCANClock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ckgen_hw.o(i.CKGEN_SetCANClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKGEN_SetCANClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetModuleClock
</UL>

<P><STRONG><a name="[f6]"></a>CKGEN_SetCANClockDivider</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_SetCANClockDivider))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetModuleClock
</UL>

<P><STRONG><a name="[ba]"></a>CKGEN_SetCANTimeStampClkDiv</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_SetCANTimeStampClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[10d]"></a>CKGEN_SetClockoutSourceSel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_SetClockoutSourceSel))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSimConfiguration
</UL>

<P><STRONG><a name="[f8]"></a>CKGEN_SetPWMClock</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, ckgen_hw.o(i.CKGEN_SetPWMClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKGEN_SetPWMClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetModuleClock
</UL>

<P><STRONG><a name="[f7]"></a>CKGEN_SetPeripheralClock</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ckgen_hw.o(i.CKGEN_SetPeripheralClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKGEN_SetPeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetModuleClock
</UL>

<P><STRONG><a name="[10e]"></a>CKGEN_SetRTCLSIClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_SetRTCLSIClock))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSimConfiguration
</UL>

<P><STRONG><a name="[10f]"></a>CKGEN_SetTPIUClkDiv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_hw.o(i.CKGEN_SetTPIUClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSimConfiguration
</UL>

<P><STRONG><a name="[110]"></a>ClockConfig_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, clock_config.o(i.ClockConfig_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ClockConfig_Init &rArr; CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SYS_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_UpdateConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
</UL>

<P><STRONG><a name="[b]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel0_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel10_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel11_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel11_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel12_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel12_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel13_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel13_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel14_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel14_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel15_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel15_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel1_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel2_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel3_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel4_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel5_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel6_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel7_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA0_Channel8_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel8_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DMA0_Channel9_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dma_irq.o(i.DMA0_Channel9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA0_Channel9_IRQHandler &rArr; DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>DMA_ClearIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma_hw.o(i.DMA_ClearIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearInterruptStatus
</UL>

<P><STRONG><a name="[112]"></a>DMA_DRV_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dma_drv.o(i.DMA_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_DRV_IRQHandler &rArr; DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel9_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel8_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel7_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel6_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel5_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel4_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel2_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel15_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel14_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel13_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel12_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel11_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel10_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>DMA_DRV_StopChannel</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dma_drv.o(i.DMA_DRV_StopChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_DRV_StopChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopTxDma
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
</UL>

<P><STRONG><a name="[117]"></a>FLASH_CollisionIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_drv.o(i.FLASH_CollisionIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_CollisionIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetCollIRQFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearCollIRQFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Collision_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>FLASH_Collision_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_irq.o(i.FLASH_Collision_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Collision_IRQHandler &rArr; FLASH_CollisionIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_CollisionIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[11d]"></a>FLASH_CompleteIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, flash_drv.o(i.FLASH_CompleteIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_CompleteIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>

<P><STRONG><a name="[11a]"></a>FLASH_ECCIRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_drv.o(i.FLASH_ECCIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ECCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetECCIRQFlag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearECCIRQFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ECC_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>FLASH_ECC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_irq.o(i.FLASH_ECC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ECC_IRQHandler &rArr; FLASH_ECCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ECCIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>FLASH_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_irq.o(i.FLASH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_IRQHandler &rArr; FLASH_CompleteIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_CompleteIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>FaultDiagnosis_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fault_diagnosis.o(i.FaultDiagnosis_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FaultDiagnosis_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b0]"></a>GPIO_DRV_ClearPins</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_drv.o(i.GPIO_DRV_ClearPins))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_DRV_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gpio_drv.o(i.GPIO_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_GetPortIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTE_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTD_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTC_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTB_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORTA_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>GPIO_DRV_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gpio_drv.o(i.GPIO_DRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_DRV_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>

<P><STRONG><a name="[182]"></a>GPIO_DRV_ReadPins</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio_drv.o(i.GPIO_DRV_ReadPins))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
</UL>

<P><STRONG><a name="[97]"></a>GPIO_DRV_SetMuxModeSel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_drv.o(i.GPIO_DRV_SetMuxModeSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_DRV_SetMuxModeSel &rArr; PORT_SetMuxModeSel
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetMuxModeSel
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ConfigGpio
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
</UL>

<P><STRONG><a name="[181]"></a>GPIO_DRV_SetPins</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_drv.o(i.GPIO_DRV_SetPins))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
</UL>

<P><STRONG><a name="[125]"></a>InitDebug</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, debugout_ac7840x.o(i.InitDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = InitDebug &rArr; UART_DRV_SetBaudRate &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetMuxModeSel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetParityMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBitCountPerChar
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
</UL>

<P><STRONG><a name="[5b]"></a>InitSram</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, system_ac7840x.o(i.InitSram))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>LVD_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spm_irq.o(i.LVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LVD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>OSIF_GetMilliseconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, osif_baremetal.o(i.OSIF_GetMilliseconds))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_GetTimeMs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_MainLoop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_AddTask
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultDiagnosis_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[bb]"></a>OSIF_SemaCreate</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, osif_baremetal.o(i.OSIF_SemaCreate))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[ab]"></a>OSIF_SemaDestroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, osif_baremetal.o(i.OSIF_SemaDestroy))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
</UL>

<P><STRONG><a name="[cd]"></a>OSIF_SemaPost</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, osif_baremetal.o(i.OSIF_SemaPost))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopTxDma
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteSendDataUsingInt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>

<P><STRONG><a name="[129]"></a>OSIF_TimeDelay</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, osif_baremetal.o(i.OSIF_TimeDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OSIF_TimeDelay &rArr; osif_UpdateTickConfig &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osif_UpdateTickConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_MainLoop
</UL>

<P><STRONG><a name="[12b]"></a>OptimizedTaskScheduler_AddTask</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, optimized_task_scheduler.o(i.OptimizedTaskScheduler_AddTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OptimizedTaskScheduler_AddTask
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>OptimizedTaskScheduler_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, optimized_task_scheduler.o(i.OptimizedTaskScheduler_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OptimizedTaskScheduler_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1c4]"></a>OptimizedTaskScheduler_IsRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, optimized_task_scheduler.o(i.OptimizedTaskScheduler_IsRunning))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>OptimizedTaskScheduler_MainLoop</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, optimized_task_scheduler.o(i.OptimizedTaskScheduler_MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OptimizedTaskScheduler_MainLoop &rArr; OSIF_TimeDelay &rArr; osif_UpdateTickConfig &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_TimeDelay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>OptimizedTaskScheduler_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, optimized_task_scheduler.o(i.OptimizedTaskScheduler_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OptimizedTaskScheduler_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>PCT_DRV_ClearCompareFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pct_drv.o(i.PCT_DRV_ClearCompareFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DRV_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>PCT_DRV_GetCompareFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pct_drv.o(i.PCT_DRV_GetCompareFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DRV_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>PCT_DRV_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pct_drv.o(i.PCT_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PCT_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DRV_GetCompareFlag
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DRV_ClearCompareFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>PCT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pct_irq.o(i.PCT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PCT_IRQHandler &rArr; PCT_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCT_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PDT0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pdt_irq.o(i.PDT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PDT0_IRQHandler &rArr; PDT_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDT1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pdt_irq.o(i.PDT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PDT1_IRQHandler &rArr; PDT_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>PDT_DRV_ClearTimerIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pdt_drv.o(i.PDT_DRV_ClearTimerIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>PDT_DRV_GetTimerIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pdt_drv.o(i.PDT_DRV_GetTimerIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>PDT_DRV_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pdt_drv.o(i.PDT_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDT_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_GetTimerIntFlag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT_DRV_ClearTimerIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDT0_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>PORTA_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_irq.o(i.PORTA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTA_IRQHandler &rArr; GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PORTB_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_irq.o(i.PORTB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTB_IRQHandler &rArr; GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PORTC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_irq.o(i.PORTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTC_IRQHandler &rArr; GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PORTD_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_irq.o(i.PORTD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTD_IRQHandler &rArr; GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PORTE_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio_irq.o(i.PORTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PORTE_IRQHandler &rArr; GPIO_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>PORT_Init</STRONG> (Thumb, 238 bytes, Stack size 20 bytes, port_hw.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>

<P><STRONG><a name="[124]"></a>PORT_SetMuxModeSel</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, port_hw.o(i.PORT_SetMuxModeSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_SetMuxModeSel
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetMuxModeSel
</UL>

<P><STRONG><a name="[3d]"></a>PWM0_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM0_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM0_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM0_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM0_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWM0_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM0_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM0_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PWM1_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM1_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM1_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PWM1_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM1_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM1_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>PWM1_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM1_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM1_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>PWM2_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM2_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM2_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>PWM2_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM2_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM2_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PWM2_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM2_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM2_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PWM3_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM3_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM3_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>PWM3_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM3_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM3_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PWM3_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM3_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM3_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>PWM4_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM4_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM4_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>PWM4_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM4_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM4_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PWM4_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM4_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM4_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>PWM5_Channel_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM5_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM5_Channel_IRQHandler &rArr; PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>PWM5_Fault_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM5_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM5_Fault_IRQHandler &rArr; PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>PWM5_Overflow_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm_irq.o(i.PWM5_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM5_Overflow_IRQHandler &rArr; PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>PWM_DRV_Channel_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm_common.o(i.PWM_DRV_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_DRV_Channel_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetAllChannelInputStatus
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetAllChannelEventFlag
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_ClearAllChannelEventFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM5_Channel_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Channel_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Channel_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Channel_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Channel_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Channel_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>PWM_DRV_ClearAllChannelEventFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_ClearAllChannelEventFlag))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>PWM_DRV_ClearOverflowFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_ClearOverflowFlag))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>PWM_DRV_Fault_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pwm_input.o(i.PWM_DRV_Fault_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_DRV_Fault_IRQHandler &rArr; PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetFaultFlag
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM5_Fault_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Fault_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Fault_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Fault_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Fault_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Fault_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>PWM_DRV_GetAllChannelEventFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_GetAllChannelEventFlag))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>PWM_DRV_GetAllChannelInputStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_GetAllChannelInputStatus))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Channel_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>PWM_DRV_GetFaultChannelFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm_input.o(i.PWM_DRV_GetFaultChannelFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_DRV_GetFaultChannelFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>PWM_DRV_GetFaultFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm_input.o(i.PWM_DRV_GetFaultFlag))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Fault_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>PWM_DRV_GetMaxCountValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_GetMaxCountValue))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
</UL>

<P><STRONG><a name="[13f]"></a>PWM_DRV_GetOverflowDir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_GetOverflowDir))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>PWM_DRV_GetOverflowFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pwm_common.o(i.PWM_DRV_GetOverflowFlag))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_Overflow_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>PWM_DRV_Overflow_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pwm_common.o(i.PWM_DRV_Overflow_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM_DRV_Overflow_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetOverflowFlag
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetOverflowDir
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_ClearOverflowFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM5_Overflow_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM4_Overflow_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM3_Overflow_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM2_Overflow_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Overflow_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Overflow_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>PWM_DRV_SetChannelCountValue</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm_common.o(i.PWM_DRV_SetChannelCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_DRV_SetChannelCountValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
</UL>

<P><STRONG><a name="[140]"></a>Platform_GetTimeMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, unified_filter.o(i.Platform_GetTimeMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Platform_GetTimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_UpdateData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_Init
</UL>

<P><STRONG><a name="[de]"></a>RCM_DRV_SetResetInterruptSource</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rcm_drv.o(i.RCM_DRV_SetResetInterruptSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_DRV_SetResetInterruptSource
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableResetInterruptSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[dd]"></a>RCM_DRV_SetResetSource</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rcm_drv.o(i.RCM_DRV_SetResetSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_DRV_SetResetSource
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_EnableResetSource
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[143]"></a>RTC_DRV_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rtc_drv.o(i.RTC_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_DRV_IRQHandler &rArr; RTC_SetTimeCntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeCntRegister
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeAlarmReg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTOF
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTAF
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearPOF
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>RTC_Disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc_hw.o(i.RTC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeCounterEnable
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeCounterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>RTC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc_irq.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_IRQHandler &rArr; RTC_DRV_IRQHandler &rArr; RTC_SetTimeCntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>RTC_SetTimeCntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc_hw.o(i.RTC_SetTimeCntRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetTimeCntRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeCounterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>SPI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_irq.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI0_IRQHandler &rArr; SPI_DRV_IRQHandler &rArr; SPI_DRV_MasterIRQHandler &rArr; SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_irq.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_DRV_IRQHandler &rArr; SPI_DRV_MasterIRQHandler &rArr; SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_irq.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_DRV_IRQHandler &rArr; SPI_DRV_MasterIRQHandler &rArr; SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>SPI_ClearStatusFlag</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spi_hw.o(i.SPI_ClearStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ClearStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SoftwareReset
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_DisableTEIEInterrupts
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>SPI_DRV_DisableTEIEInterrupts</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi_shared_function.o(i.SPI_DRV_DisableTEIEInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetIntMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[158]"></a>SPI_DRV_FillupTxBuffer</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, spi_shared_function.o(i.SPI_DRV_FillupTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DRV_FillupTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>SPI_DRV_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, spi_shared_function.o(i.SPI_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_DRV_IRQHandler &rArr; SPI_DRV_MasterIRQHandler &rArr; SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>SPI_DRV_MasterAbortTransfer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_master_drv.o(i.SPI_DRV_MasterAbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[151]"></a>SPI_DRV_MasterIRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, spi_master_drv.o(i.SPI_DRV_MasterIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_DRV_MasterIRQHandler &rArr; SPI_DRV_MasterAbortTransfer &rArr; SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_ReadRXBuffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_FillupTxBuffer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterAbortTransfer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetIntMode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatusFlag
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetRxOnly
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetIntMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>SPI_DRV_MasterReleaseCS</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi_master_drv.o(i.SPI_DRV_MasterReleaseCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DRV_MasterReleaseCS
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[157]"></a>SPI_DRV_ReadRXBuffer</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, spi_shared_function.o(i.SPI_DRV_ReadRXBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_DRV_ReadRXBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>SPI_DRV_SlaveAbortTransfer</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, spi_slave_drv.o(i.SPI_DRV_SlaveAbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_DRV_SlaveAbortTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_StopChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTxDmaCmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetRxDmaCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetIntMode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_DisableTEIEInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[152]"></a>SPI_DRV_SlaveIRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, spi_slave_drv.o(i.SPI_DRV_SlaveIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_DRV_SlaveIRQHandler &rArr; SPI_DRV_SlaveAbortTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_DRV_SetPowerMode
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_DRV_GetPowerControlMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetIntMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatusFlag
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_ReadRXBuffer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_FillupTxBuffer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>SPI_SoftwareReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi_hw.o(i.SPI_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearStatusFlag
</UL>

<P><STRONG><a name="[161]"></a>SPM_DRV_GetPowerControlMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spm_drv.o(i.SPM_DRV_GetPowerControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>SPM_DRV_GetPowerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spm_drv.o(i.SPM_DRV_GetPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentRunMode
</UL>

<P><STRONG><a name="[162]"></a>SPM_DRV_SetPowerMode</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, spm_drv.o(i.SPM_DRV_SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPM_DRV_SetPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_GetSPLLStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[3a]"></a>SPM_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spm_irq.o(i.SPM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>Sensor_ADCToLNGPressure</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sensor.o(i.Sensor_ADCToLNGPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_ADCToLNGPressure
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ConvertAdcToVoltage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_To_LNG_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[169]"></a>Sensor_ADCToLNGTemperature</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sensor.o(i.Sensor_ADCToLNGTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Sensor_ADCToLNGTemperature &rArr; Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ConvertAdcToVoltage
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_To_Temperature_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[16b]"></a>Sensor_ADCToOilPressure</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sensor.o(i.Sensor_ADCToOilPressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sensor_ADCToOilPressure
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ConvertAdcToVoltage
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_To_Oil_Pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[16d]"></a>Sensor_ADCToOilTemperature</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sensor.o(i.Sensor_ADCToOilTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Sensor_ADCToOilTemperature &rArr; Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ConvertAdcToVoltage
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_To_Temperature_Common
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[195]"></a>Sensor_CheckDataValidity</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sensor.o(i.Sensor_CheckDataValidity))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
</UL>

<P><STRONG><a name="[167]"></a>Sensor_ConvertAdcToVoltage</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sensor.o(i.Sensor_ConvertAdcToVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilTemperature
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilPressure
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGPressure
</UL>

<P><STRONG><a name="[16e]"></a>Sensor_FaultDiagnosis</STRONG> (Thumb, 172 bytes, Stack size 4 bytes, sensor.o(i.Sensor_FaultDiagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sensor_FaultDiagnosis
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ValidateValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[170]"></a>Sensor_GetADCValue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sensor.o(i.Sensor_GetADCValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sensor_GetADCValue &rArr; ADC_DRV_ConfigChan &rArr; ADC_SetChannelSampleTime
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_SoftwareStartRegularConvert
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetSeqResult
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetConvCompleteFlag
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ClearConvCompleteFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetAllADCValues
</UL>

<P><STRONG><a name="[173]"></a>Sensor_GetAllADCValues</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sensor.o(i.Sensor_GetAllADCValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sensor_GetAllADCValues &rArr; Sensor_GetADCValue &rArr; ADC_DRV_ConfigChan &rArr; ADC_SetChannelSampleTime
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetADCValue
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[18f]"></a>Sensor_GetLNGPressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor.o(i.Sensor_GetLNGPressure))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[18b]"></a>Sensor_GetLNGTemperature</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor.o(i.Sensor_GetLNGTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[18d]"></a>Sensor_GetOilPressure</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor.o(i.Sensor_GetOilPressure))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[189]"></a>Sensor_GetOilTemperature</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sensor.o(i.Sensor_GetOilTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[174]"></a>Sensor_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sensor.o(i.Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Sensor_Init &rArr; Sensor_InitADC &rArr; ADC_DRV_ConfigConverter &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitMonitor
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_InitADC
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[175]"></a>Sensor_InitADC</STRONG> (Thumb, 134 bytes, Stack size 104 bytes, sensor.o(i.Sensor_InitADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sensor_InitADC &rArr; ADC_DRV_ConfigConverter &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_InitConverterStruct
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_InitChanStruct
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[176]"></a>Sensor_InitMonitor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sensor.o(i.Sensor_InitMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sensor_InitMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[17a]"></a>Sensor_UpdateMonitor</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, sensor.o(i.Sensor_UpdateMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Sensor_UpdateMonitor &rArr; Sensor_ADCToOilTemperature &rArr; Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_UpdateData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_GetFilteredOilTemperature
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_GetFilteredOilPressure
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_GetFilteredLNGTemperature
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnifiedFilter_GetFilteredLNGPressure
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetAllADCValues
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_FaultDiagnosis
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ConvertAdcToVoltage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilTemperature
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilPressure
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGTemperature
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[16f]"></a>Sensor_ValidateValue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sensor.o(i.Sensor_ValidateValue))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_FaultDiagnosis
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, osif_baremetal.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_ac7840x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>TIMER_Channel0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_irq.o(i.TIMER_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Channel0_IRQHandler &rArr; TIMER_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIMER_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_irq.o(i.TIMER_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Channel1_IRQHandler &rArr; TIMER_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIMER_Channel2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_irq.o(i.TIMER_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Channel2_IRQHandler &rArr; TIMER_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIMER_Channel3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_irq.o(i.TIMER_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_Channel3_IRQHandler &rArr; TIMER_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>TIMER_DRV_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer_drv.o(i.TIMER_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetInterruptFlag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Channel3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Channel2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Channel1_IRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>Task_1000ms_CANStatusMonitor</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(i.Task_1000ms_CANStatusMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task_1000ms_CANStatusMonitor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_GetStats
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[65]"></a>Task_100ms_RealTimeCANMonitor</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(i.Task_100ms_RealTimeCANMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task_100ms_RealTimeCANMonitor &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_GetStats
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[61]"></a>Task_10ms_SendSensorData</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, main.o(i.Task_10ms_SendSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Task_10ms_SendSensorData &rArr; Sensor_UpdateMonitor &rArr; Sensor_ADCToOilTemperature &rArr; Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_pack
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_temperature_encode
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_oil_pressure_encode
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_bypass_ratio_encode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_temperature_encode
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_LNG_pressure_encode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetDirectionalValveState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetBypassValveDuty
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilTemperature
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilPressure
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetLNGTemperature
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetLNGPressure
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[66]"></a>Task_1ms_CANMessageProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.Task_1ms_CANMessageProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_1ms_CANMessageProcess &rArr; CAN_Config_Task &rArr; CAN_Config_ReceiveMessage &rArr; CAN_DRV_Receive &rArr; CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[64]"></a>Task_2000ms_SensorDataMonitor</STRONG> (Thumb, 494 bytes, Stack size 96 bytes, main.o(i.Task_2000ms_SensorDataMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Task_2000ms_SensorDataMonitor &rArr; Sensor_UpdateMonitor &rArr; Sensor_ADCToOilTemperature &rArr; Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetDirectionalValveState
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetCoolerState
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_GetBypassValveDuty
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilTemperature
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilPressure
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetLNGTemperature
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetLNGPressure
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckDataValidity
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[62]"></a>Task_50ms_SafetyCheck</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, main.o(i.Task_50ms_SafetyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task_50ms_SafetyCheck &rArr; ValveControl_SetBypassValve &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_CheckHardwareStatus
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilTemperature
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_GetOilPressure
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_CheckDataValidity
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[20]"></a>UART0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_irq.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_irq.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_irq.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_irq.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>UART_ClearStatusFlag</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, uart_hw.o(i.UART_ClearStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_ClearStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>UART_DRV_IRQHandler</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uart_drv.o(i.UART_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_DRV_IRQHandler &rArr; UART_RxIrqHandler &rArr; UART_CompleteReceiveDataUsingInt &rArr; UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlag
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntMode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearStatusFlag
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxIrqHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCompleteIrqHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxIrqHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_irq.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>UART_DRV_SetBaudRate</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, uart_drv.o(i.UART_DRV_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_DRV_SetBaudRate &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRateDivisor
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
</UL>

<P><STRONG><a name="[19e]"></a>UART_GetIntMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart_hw.o(i.UART_GetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>UART_GetStatusFlag</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart_hw.o(i.UART_GetStatusFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetStatusFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrIrqHandler
</UL>

<P><STRONG><a name="[1a8]"></a>UART_Getchar9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_hw.o(i.UART_Getchar9))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
</UL>

<P><STRONG><a name="[1aa]"></a>UART_Putchar9</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart_hw.o(i.UART_Putchar9))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
</UL>

<P><STRONG><a name="[1a4]"></a>UART_SetBaudRateDivisor</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uart_hw.o(i.UART_SetBaudRateDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_SetBaudRate
</UL>

<P><STRONG><a name="[127]"></a>UART_SetBitCountPerChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_hw.o(i.UART_SetBitCountPerChar))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
</UL>

<P><STRONG><a name="[199]"></a>UART_SetErrorInterrupts</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, uart_hw.o(i.UART_SetErrorInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>

<P><STRONG><a name="[19b]"></a>UART_SetIntMode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, uart_hw.o(i.UART_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetErrorInterrupts
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxIrqHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopTxDma
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteSendDataUsingInt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>

<P><STRONG><a name="[128]"></a>UART_SetParityMode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, uart_hw.o(i.UART_SetParityMode))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
</UL>

<P><STRONG><a name="[17f]"></a>UnifiedFilter_GetFilteredLNGPressure</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, unified_filter.o(i.UnifiedFilter_GetFilteredLNGPressure))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[17d]"></a>UnifiedFilter_GetFilteredLNGTemperature</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, unified_filter.o(i.UnifiedFilter_GetFilteredLNGTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[17e]"></a>UnifiedFilter_GetFilteredOilPressure</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, unified_filter.o(i.UnifiedFilter_GetFilteredOilPressure))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[17c]"></a>UnifiedFilter_GetFilteredOilTemperature</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, unified_filter.o(i.UnifiedFilter_GetFilteredOilTemperature))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[177]"></a>UnifiedFilter_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, unified_filter.o(i.UnifiedFilter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnifiedFilter_Init &rArr; Platform_GetTimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_GetTimeMs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[17b]"></a>UnifiedFilter_UpdateData</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, unified_filter.o(i.UnifiedFilter_UpdateData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UnifiedFilter_UpdateData &rArr; Platform_GetTimeMs
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Platform_GetTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_UpdateMonitor
</UL>

<P><STRONG><a name="[196]"></a>ValveControl_CheckHardwareStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, valve_control.o(i.ValveControl_CheckHardwareStatus))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
</UL>

<P><STRONG><a name="[191]"></a>ValveControl_GetBypassValveDuty</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, valve_control.o(i.ValveControl_GetBypassValveDuty))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[194]"></a>ValveControl_GetCoolerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, valve_control.o(i.ValveControl_GetCoolerState))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
</UL>

<P><STRONG><a name="[d4]"></a>ValveControl_GetDirectionalValveState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, valve_control.o(i.ValveControl_GetDirectionalValveState))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[184]"></a>ValveControl_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, valve_control.o(i.ValveControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValveControl_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d2]"></a>ValveControl_SetBypassValve</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, valve_control.o(i.ValveControl_SetBypassValve))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ValveControl_SetBypassValve &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_SetChannelCountValue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DRV_GetMaxCountValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[d3]"></a>ValveControl_SetCooler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, valve_control.o(i.ValveControl_SetCooler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ValveControl_SetCooler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPins
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPins
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d0]"></a>ValveControl_SetDirectionalValve</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, valve_control.o(i.ValveControl_SetDirectionalValve))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ValveControl_SetDirectionalValve &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ClearPins
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_GetMilliseconds
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPins
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_50ms_SafetyCheck
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1b2]"></a>WDG_DRV_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wdg_drv.o(i.WDG_DRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDG_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_Unlock
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_ClearInterruptFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>WDG_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wdg_irq.o(i.WDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDG_IRQHandler &rArr; WDG_DRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_DRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac7840x.o(RESET)
</UL>
<P><STRONG><a name="[1b5]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1da]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[a1]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EventCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetBypassValve
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ResetController
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100ms_RealTimeCANMonitor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1000ms_CANStatusMonitor
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1db]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1dc]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debugout_ac7840x.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; UART_GetStatusFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d1]"></a>gcu_control_ctrl_bypass_valve_duty_decode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gcu_control_dbc.o(i.gcu_control_ctrl_bypass_valve_duty_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gcu_control_ctrl_bypass_valve_duty_decode &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[ce]"></a>gcu_control_unpack</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gcu_control_dbc.o(i.gcu_control_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcu_control_unpack
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_right_shift_u8
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_right_shift_u16
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_left_shift_u32
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_left_shift_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RxCallback
</UL>

<P><STRONG><a name="[190]"></a>gcu_debug1_LNG_pressure_encode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gcu_control_dbc.o(i.gcu_debug1_LNG_pressure_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gcu_debug1_LNG_pressure_encode &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[18c]"></a>gcu_debug1_LNG_temperature_encode</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gcu_control_dbc.o(i.gcu_debug1_LNG_temperature_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gcu_debug1_LNG_temperature_encode &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[192]"></a>gcu_debug1_bypass_ratio_encode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gcu_control_dbc.o(i.gcu_debug1_bypass_ratio_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gcu_debug1_bypass_ratio_encode &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[18e]"></a>gcu_debug1_oil_pressure_encode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gcu_control_dbc.o(i.gcu_debug1_oil_pressure_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = gcu_debug1_oil_pressure_encode &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[18a]"></a>gcu_debug1_oil_temperature_encode</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, gcu_control_dbc.o(i.gcu_debug1_oil_temperature_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gcu_debug1_oil_temperature_encode &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[193]"></a>gcu_debug1_pack</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, gcu_control_dbc.o(i.gcu_debug1_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcu_debug1_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_right_shift_u16
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_left_shift_u8
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pack_left_shift_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10ms_SendSensorData
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 1592 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = main &rArr; SystemInit &rArr; SystemHardwareInit &rArr; ClockConfig_Init &rArr; CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_Start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_MainLoop
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_IsRunning
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_AddTask
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_SendMessage
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_ResetController
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_RegisterRxCallback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_GetStats
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_2000ms_SensorDataMonitor
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1000ms_CANStatusMonitor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1c6]"></a>pt1000_get_temp_float</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, pt1000_temp_calibration.o(i.pt1000_get_temp_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pt1000_get_temp_float
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_voltage_to_temp_float
</UL>

<P><STRONG><a name="[1c5]"></a>pt1000_voltage_to_resistance</STRONG> (Thumb, 380 bytes, Stack size 184 bytes, pt1000_temp_calibration.o(i.pt1000_voltage_to_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_voltage_to_temp_float
</UL>

<P><STRONG><a name="[1b1]"></a>pt1000_voltage_to_temp_float</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pt1000_temp_calibration.o(i.pt1000_voltage_to_temp_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_voltage_to_resistance
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_get_temp_float
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Voltage_To_Temperature_Common
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[180]"></a>SystemHardwareInit</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, main.o(i.SystemHardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SystemHardwareInit &rArr; ClockConfig_Init &rArr; CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDebug
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetPins
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_ReadPins
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockConfig_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SoftReset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_Enable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[183]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SystemInit &rArr; SystemHardwareInit &rArr; ClockConfig_Init &rArr; CKGEN_DRV_UpdateConfiguration &rArr; CKGEN_DRV_SetConfiguration &rArr; CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetDirectionalValve
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_SetCooler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValveControl_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimizedTaskScheduler_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultDiagnosis_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHardwareInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>CAN_ConfigFilters</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, can_config.o(i.CAN_ConfigFilters))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[96]"></a>CAN_ConfigGpio</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, can_config.o(i.CAN_ConfigGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CAN_ConfigGpio &rArr; GPIO_DRV_SetMuxModeSel &rArr; PORT_SetMuxModeSel
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_SetMuxModeSel
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[5e]"></a>CAN_EventCallback</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, can_config.o(i.CAN_EventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CAN_EventCallback &rArr; CAN_DRV_Receive &rArr; CAN_DRV_GetMsgFromRbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Receive
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_config.o(i.CAN_Config_Init)
</UL>
<P><STRONG><a name="[168]"></a>Voltage_To_LNG_Pressure</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, sensor.o(i.Voltage_To_LNG_Pressure))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGPressure
</UL>

<P><STRONG><a name="[16c]"></a>Voltage_To_Oil_Pressure</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, sensor.o(i.Voltage_To_Oil_Pressure))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilPressure
</UL>

<P><STRONG><a name="[16a]"></a>Voltage_To_Temperature_Common</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sensor.o(i.Voltage_To_Temperature_Common))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Voltage_To_Temperature_Common &rArr; pt1000_voltage_to_temp_float &rArr; pt1000_voltage_to_resistance
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pt1000_voltage_to_temp_float
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToOilTemperature
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ADCToLNGTemperature
</UL>

<P><STRONG><a name="[1c1]"></a>pack_left_shift_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.pack_left_shift_u16))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_pack
</UL>

<P><STRONG><a name="[1c0]"></a>pack_left_shift_u8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.pack_left_shift_u8))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_pack
</UL>

<P><STRONG><a name="[1c2]"></a>pack_right_shift_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.pack_right_shift_u16))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_debug1_pack
</UL>

<P><STRONG><a name="[1be]"></a>unpack_left_shift_u16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.unpack_left_shift_u16))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_unpack
</UL>

<P><STRONG><a name="[1bf]"></a>unpack_left_shift_u32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.unpack_left_shift_u32))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_unpack
</UL>

<P><STRONG><a name="[1bd]"></a>unpack_right_shift_u16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.unpack_right_shift_u16))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_unpack
</UL>

<P><STRONG><a name="[1bc]"></a>unpack_right_shift_u8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gcu_control_dbc.o(i.unpack_right_shift_u8))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcu_control_unpack
</UL>

<P><STRONG><a name="[83]"></a>ADC_ClearInjectEOCFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_ClearInjectEOCFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ClearInjectEOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ClearConvCompleteFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[86]"></a>ADC_ClearRegularEOCFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_ClearRegularEOCFlag))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ClearConvCompleteFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[82]"></a>ADC_GetInjectEOCFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_GetInjectEOCFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetInjectEOCFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetConvCompleteFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[81]"></a>ADC_GetInjectEOCInterruptEnableFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_GetInjectEOCInterruptEnableFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetInjectEOCInterruptEnableFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[80]"></a>ADC_GetInjectLength</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_GetInjectLength))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[85]"></a>ADC_GetRegularEOCFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_GetRegularEOCFlag))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_GetConvCompleteFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[84]"></a>ADC_GetRegularEOCInterruptEnableFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_GetRegularEOCInterruptEnableFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonISR
</UL>

<P><STRONG><a name="[8f]"></a>ADC_InitDelay</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc_drv.o(i.ADC_InitDelay))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigConverter
</UL>

<P><STRONG><a name="[89]"></a>ADC_SetChannelSampleTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc_drv.o(i.ADC_SetChannelSampleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SetChannelSampleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
</UL>

<P><STRONG><a name="[8a]"></a>ADC_SetRegularConversionChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc_drv.o(i.ADC_SetRegularConversionChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SetRegularConversionChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DRV_ConfigChan
</UL>

<P><STRONG><a name="[ad]"></a>CAN_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, can_drv.o(i.CAN_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
</UL>

<P><STRONG><a name="[af]"></a>CAN_EnableWakeupIRQ</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, can_drv.o(i.CAN_EnableWakeupIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_EnableWakeupIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
</UL>

<P><STRONG><a name="[b2]"></a>CAN_GetRbufStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_drv.o(i.CAN_GetRbufStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_GetRbufStatus
</UL>

<P><STRONG><a name="[be]"></a>CAN_GetResetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_drv.o(i.CAN_GetResetState))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetFilter
</UL>

<P><STRONG><a name="[bf]"></a>CAN_GetStandbyState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_drv.o(i.CAN_GetStandbyState))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
</UL>

<P><STRONG><a name="[c0]"></a>CAN_IsTransmitBusy</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, can_drv.o(i.CAN_IsTransmitBusy))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
</UL>

<P><STRONG><a name="[c1]"></a>CAN_IsTransmitting</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, can_drv.o(i.CAN_IsTransmitting))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Send
</UL>

<P><STRONG><a name="[bd]"></a>CAN_ReleaseRbuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_ReleaseRbuf))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Receive
</UL>

<P><STRONG><a name="[c7]"></a>CAN_SelectNextTsbuf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SelectNextTsbuf))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetMsgToTbuf
</UL>

<P><STRONG><a name="[cb]"></a>CAN_SetCtrl1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetCtrl1))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>CAN_SetFastBitrate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetFastBitrate))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[bc]"></a>CAN_SetIntMask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetIntMask))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[b8]"></a>CAN_SetListenOnlyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetListenOnlyMode))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[aa]"></a>CAN_SetReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetReset))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Deinit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetFilter
</UL>

<P><STRONG><a name="[b3]"></a>CAN_SetSlowBitrate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetSlowBitrate))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[b6]"></a>CAN_SetSspOffset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetSspOffset))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[c5]"></a>CAN_SetTbufSelect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetTbufSelect))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_SetMsgToTbuf
</UL>

<P><STRONG><a name="[b5]"></a>CAN_SetTdc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetTdc))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[b9]"></a>CAN_SetTimeStamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetTimeStamp))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DRV_Init
</UL>

<P><STRONG><a name="[cc]"></a>CAN_SetVerMem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_drv.o(i.CAN_SetVerMem))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableWakeupIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableIRQ
</UL>

<P><STRONG><a name="[c9]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_drv.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableWakeupIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableIRQ
</UL>

<P><STRONG><a name="[c8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, can_drv.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableWakeupIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableIRQ
</UL>

<P><STRONG><a name="[d7]"></a>CKGEN_ConfigureHSE</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, ckgen_drv.o(i.CKGEN_ConfigureHSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CKGEN_ConfigureHSE &rArr; RCM_DRV_SetResetSource
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetSource
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetInterruptSource
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_EnableXOSC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetXOSCMonitor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_CtrlRegisterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[e0]"></a>CKGEN_ConfigureHSI</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_ConfigureHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_ConfigureHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[e2]"></a>CKGEN_ConfigureModules</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ckgen_drv.o(i.CKGEN_ConfigureModules))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_TransitionSystemClock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentRunMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureVHSI
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSI
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetConfiguration
</UL>

<P><STRONG><a name="[e3]"></a>CKGEN_ConfigureSPLL</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ckgen_drv.o(i.CKGEN_ConfigureSPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CKGEN_ConfigureSPLL &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetSource
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetInterruptSource
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_EnableSPLL
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_CtrlRegisterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[e8]"></a>CKGEN_ConfigureTemporarySystemClock</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_ConfigureTemporarySystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CKGEN_ConfigureTemporarySystemClock &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_TransitionSystemClock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureVHSI
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetConfiguration
</UL>

<P><STRONG><a name="[e6]"></a>CKGEN_ConfigureVHSI</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_ConfigureVHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_ConfigureVHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_EnableVHSI
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureTemporarySystemClock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[d9]"></a>CKGEN_CtrlRegisterLock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_CtrlRegisterLock))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSystemClockConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[eb]"></a>CKGEN_GetClockFreq</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ckgen_drv.o(i.CKGEN_GetClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CKGEN_GetClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
</UL>

<P><STRONG><a name="[e4]"></a>CKGEN_GetCurrentRunMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetCurrentRunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_GetCurrentRunMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_DRV_GetPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_TransitionSystemClock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[10a]"></a>CKGEN_GetCurrentSysClockDividerRatio</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_GetCurrentSysClockDividerRatio))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
</UL>

<P><STRONG><a name="[ef]"></a>CKGEN_GetDefaultConfiguration</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_GetDefaultConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>

<P><STRONG><a name="[db]"></a>CKGEN_GetHSEFreq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_GetHSEFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSrcFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[e1]"></a>CKGEN_GetHSIFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_GetHSIFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSrcFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSI
</UL>

<P><STRONG><a name="[ff]"></a>CKGEN_GetLSIFreq</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetLSIFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CKGEN_GetLSIFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetLSIClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClockFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
</UL>

<P><STRONG><a name="[fc]"></a>CKGEN_GetMux1ClkOutFreq</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetMux1ClkOutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_GetMux1ClkOutFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockoutSourceFromMux1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
</UL>

<P><STRONG><a name="[ed]"></a>CKGEN_GetPccClockFreq</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, ckgen_drv.o(i.CKGEN_GetPccClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = CKGEN_GetPccClockFreq &rArr;  CKGEN_DRV_GetFreq (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPeripheralClock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPWMClock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCANClockDivider
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCANClock
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
</UL>

<P><STRONG><a name="[106]"></a>CKGEN_GetRtcClkFreq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetRtcClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetRTCClock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClockFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
</UL>

<P><STRONG><a name="[d6]"></a>CKGEN_GetSPLLFreq</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ckgen_drv.o(i.CKGEN_GetSPLLFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_GetSPLLStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_AutoTest
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSrcFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
</UL>

<P><STRONG><a name="[fb]"></a>CKGEN_GetSimClkOutFreq</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetSimClkOutFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockoutSourceSel
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetRtcClkFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetLSIFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClockFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
</UL>

<P><STRONG><a name="[ec]"></a>CKGEN_GetSimClockFreq</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_GetSimClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetPWMClock
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetRtcClkFreq
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetLSIFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
</UL>

<P><STRONG><a name="[109]"></a>CKGEN_GetSrcFreq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ckgen_drv.o(i.CKGEN_GetSrcFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSystemClockConfig
</UL>

<P><STRONG><a name="[fd]"></a>CKGEN_GetSysAsyncFreq</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_GetSysAsyncFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetRtcClkFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
</UL>

<P><STRONG><a name="[fa]"></a>CKGEN_GetSystemClockFreq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CKGEN_GetSystemClockFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentBusClockDividerRatio
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetVHSIFreq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSIFreq
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetHSEFreq
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSysClockDividerRatio
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
</UL>

<P><STRONG><a name="[e9]"></a>CKGEN_GetVHSIFreq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_GetVHSIFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSystemClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSysAsyncFreq
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSrcFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSimClkOutFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetMux1ClkOutFreq
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetClockFreq
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureVHSI
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureTemporarySystemClock
</UL>

<P><STRONG><a name="[f0]"></a>CKGEN_SetConfiguration</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CKGEN_SetConfiguration &rArr; CKGEN_ConfigureModules &rArr; CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSystemClockConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureTemporarySystemClock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>

<P><STRONG><a name="[f3]"></a>CKGEN_SetPccConfiguration</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_SetPccConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CKGEN_SetPccConfiguration &rArr; CKGEN_DRV_SetModuleClock &rArr; CKGEN_SetPWMClock
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>

<P><STRONG><a name="[f2]"></a>CKGEN_SetSimConfiguration</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ckgen_drv.o(i.CKGEN_SetSimConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKGEN_SetSimConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetTPIUClkDiv
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetRTCLSIClock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetClockoutSourceSel
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
</UL>

<P><STRONG><a name="[10c]"></a>CKGEN_SetSystemClockConfig</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, ckgen_drv.o(i.CKGEN_SetSystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSrcFreq
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_CtrlRegisterLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_TransitionSystemClock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetConfiguration
</UL>

<P><STRONG><a name="[dc]"></a>CKGEN_SetXOSCMonitor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ckgen_drv.o(i.CKGEN_SetXOSCMonitor))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[e5]"></a>CKGEN_TransitionSystemClock</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ckgen_drv.o(i.CKGEN_TransitionSystemClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CKGEN_TransitionSystemClock &rArr; CKGEN_SetSystemClockConfig &rArr; CKGEN_GetSrcFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentSystemClockSource
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSystemClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetCurrentRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureTemporarySystemClock
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureModules
</UL>

<P><STRONG><a name="[df]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ckgen_drv.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[e7]"></a>SPM_EnableSPLL</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.SPM_EnableSPLL))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureSPLL
</UL>

<P><STRONG><a name="[ea]"></a>SPM_EnableVHSI</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.SPM_EnableVHSI))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureVHSI
</UL>

<P><STRONG><a name="[da]"></a>SPM_EnableXOSC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ckgen_drv.o(i.SPM_EnableXOSC))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_ConfigureHSE
</UL>

<P><STRONG><a name="[f1]"></a>SPM_GetSPLLStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ckgen_drv.o(i.SPM_GetSPLLStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_SetConfiguration
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_GetSPLLFreq
</UL>

<P><STRONG><a name="[113]"></a>DMA_ClearInterruptStatus</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dma_drv.o(i.DMA_ClearInterruptStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_ClearInterruptStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>DMA_SetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma_drv.o(i.DMA_SetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_StopChannel
</UL>

<P><STRONG><a name="[119]"></a>FLASH_ClearCollIRQFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_drv.o(i.FLASH_ClearCollIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_CollisionIRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>FLASH_ClearECCIRQFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, flash_drv.o(i.FLASH_ClearECCIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ECCIRQHandler
</UL>

<P><STRONG><a name="[118]"></a>FLASH_GetCollIRQFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_drv.o(i.FLASH_GetCollIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_CollisionIRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>FLASH_GetECCIRQFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flash_drv.o(i.FLASH_GetECCIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ECCIRQHandler
</UL>

<P><STRONG><a name="[123]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio_drv.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_Init
</UL>

<P><STRONG><a name="[120]"></a>PORT_GetPortIntFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio_drv.o(i.PORT_GetPortIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DRV_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>RCM_EnableResetInterruptSource</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, rcm_drv.o(i.RCM_EnableResetInterruptSource))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetInterruptSource
</UL>

<P><STRONG><a name="[142]"></a>RCM_EnableResetSource</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, rcm_drv.o(i.RCM_EnableResetSource))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_DRV_SetResetSource
</UL>

<P><STRONG><a name="[144]"></a>RTC_ClearPOF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_ClearPOF))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>RTC_GetTAF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_GetTAF))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>RTC_GetTOF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_GetTOF))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>RTC_SetTimeAlarmReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc_drv.o(i.RTC_SetTimeAlarmReg))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DRV_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>RTC_GetTimeCounterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_hw.o(i.RTC_GetTimeCounterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTimeCntRegister
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Disable
</UL>

<P><STRONG><a name="[14b]"></a>RTC_SetTimeCounterEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtc_hw.o(i.RTC_SetTimeCounterEnable))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Disable
</UL>

<P><STRONG><a name="[15a]"></a>SPI_GetIntMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_master_drv.o(i.SPI_GetIntMode))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[156]"></a>SPI_GetRxOnly</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_master_drv.o(i.SPI_GetRxOnly))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[155]"></a>SPI_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_master_drv.o(i.SPI_GetStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterReleaseCS
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
</UL>

<P><STRONG><a name="[154]"></a>SPI_MasterCompleteTransfer</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, spi_master_drv.o(i.SPI_MasterCompleteTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_MasterCompleteTransfer &rArr; SPI_DRV_DisableTEIEInterrupts &rArr; SPI_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_StopChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_DisableTEIEInterrupts
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterReleaseCS
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTxDmaCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetRxDmaCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterAbortTransfer
</UL>

<P><STRONG><a name="[159]"></a>SPI_SetIntMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_master_drv.o(i.SPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_MasterIRQHandler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[163]"></a>SPI_SetRxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_master_drv.o(i.SPI_SetRxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[164]"></a>SPI_SetTxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_master_drv.o(i.SPI_SetTxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterCompleteTransfer
</UL>

<P><STRONG><a name="[150]"></a>SPI_SetIntMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_shared_function.o(i.SPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_DisableTEIEInterrupts
</UL>

<P><STRONG><a name="[160]"></a>SPI_GetStatusFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_slave_drv.o(i.SPI_GetStatusFlag))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>SPI_SetIntMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spi_slave_drv.o(i.SPI_SetIntMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveIRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>SPI_SetRxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_slave_drv.o(i.SPI_SetRxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
</UL>

<P><STRONG><a name="[15f]"></a>SPI_SetTxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_slave_drv.o(i.SPI_SetTxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DRV_SlaveAbortTransfer
</UL>

<P><STRONG><a name="[165]"></a>SPM_GetSPLLStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spm_drv.o(i.SPM_GetSPLLStatus))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_DRV_SetPowerMode
</UL>

<P><STRONG><a name="[187]"></a>TIMER_ClearInterruptFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_drv.o(i.TIMER_ClearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>TIMER_GetInterruptFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_drv.o(i.TIMER_GetInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_DRV_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>UART_CompleteReceiveDataUsingInt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_drv.o(i.UART_CompleteReceiveDataUsingInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_CompleteReceiveDataUsingInt &rArr; UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetErrorInterrupts
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetReceiverCmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxIrqHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrIrqHandler
</UL>

<P><STRONG><a name="[19c]"></a>UART_CompleteSendDataUsingInt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_drv.o(i.UART_CompleteSendDataUsingInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_CompleteSendDataUsingInt &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCompleteIrqHandler
</UL>

<P><STRONG><a name="[1a6]"></a>UART_DRV_ClearErrorFlags</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_drv.o(i.UART_DRV_ClearErrorFlags))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrIrqHandler
</UL>

<P><STRONG><a name="[19d]"></a>UART_ErrIrqHandler</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, uart_drv.o(i.UART_ErrIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_ErrIrqHandler &rArr; UART_StopRxDma &rArr; UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatusFlag
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_ClearErrorFlags
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>UART_GetData</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart_drv.o(i.UART_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Getchar9
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxIrqHandler
</UL>

<P><STRONG><a name="[19a]"></a>UART_Getchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_drv.o(i.UART_Getchar))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>

<P><STRONG><a name="[1a9]"></a>UART_PutData</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, uart_drv.o(i.UART_PutData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Putchar9
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxIrqHandler
</UL>

<P><STRONG><a name="[1a0]"></a>UART_RxIrqHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, uart_drv.o(i.UART_RxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_RxIrqHandler &rArr; UART_CompleteReceiveDataUsingInt &rArr; UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>UART_SetReceiverCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart_drv.o(i.UART_SetReceiverCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteReceiveDataUsingInt
</UL>

<P><STRONG><a name="[1ab]"></a>UART_SetRxDmaCmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_drv.o(i.UART_SetRxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopRxDma
</UL>

<P><STRONG><a name="[1ad]"></a>UART_SetTxDmaCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart_drv.o(i.UART_SetTxDmaCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopTxDma
</UL>

<P><STRONG><a name="[1a5]"></a>UART_StopRxDma</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uart_drv.o(i.UART_StopRxDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_StopRxDma &rArr; UART_SetErrorInterrupts &rArr; UART_SetIntMode
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_StopChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetErrorInterrupts
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetRxDmaCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetReceiverCmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ErrIrqHandler
</UL>

<P><STRONG><a name="[1ac]"></a>UART_StopTxDma</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart_drv.o(i.UART_StopTxDma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_StopTxDma &rArr; DMA_DRV_StopChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DRV_StopChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_SemaPost
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetTxDmaCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCompleteIrqHandler
</UL>

<P><STRONG><a name="[1a2]"></a>UART_TxCompleteIrqHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, uart_drv.o(i.UART_TxCompleteIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_TxCompleteIrqHandler &rArr; UART_StopTxDma &rArr; DMA_DRV_StopChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopTxDma
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CompleteSendDataUsingInt
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>UART_TxIrqHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, uart_drv.o(i.UART_TxIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_TxIrqHandler &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetIntMode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>WDG_ClearInterruptFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wdg_drv.o(i.WDG_ClearInterruptFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_DRV_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>WDG_Unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdg_drv.o(i.WDG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_DRV_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>osif_UpdateTickConfig</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, osif_baremetal.o(i.osif_UpdateTickConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osif_UpdateTickConfig &rArr; CKGEN_DRV_GetFreq &rArr; CKGEN_GetSimClockFreq &rArr; CKGEN_GetSimClkOutFreq &rArr; CKGEN_GetRtcClkFreq &rArr; CKGEN_GetSysAsyncFreq &rArr; CKGEN_GetSPLLFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_DRV_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIF_TimeDelay
</UL>

<P><STRONG><a name="[1b7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1ba]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
